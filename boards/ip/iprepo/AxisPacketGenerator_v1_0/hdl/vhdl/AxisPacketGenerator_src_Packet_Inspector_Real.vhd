-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\axis_packet_generator\AxisPacketGenerator_src_Packet_Inspector_Real.vhd
-- Created: 2021-02-09 12:52:35
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: AxisPacketGenerator_src_Packet_Inspector_Real
-- Source Path: axis_packet_generator/AXI-Stream Packet Generator/Packet Inspector Real
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY AxisPacketGenerator_src_Packet_Inspector_Real IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        transfer                          :   IN    std_logic;  -- ufix1
        End_In                            :   IN    std_logic;
        Start_In                          :   IN    std_logic;
        Valid_In                          :   IN    std_logic;
        Data_In                           :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        End_Out                           :   OUT   std_logic;
        Valid_Out                         :   OUT   std_logic;
        Data_Out                          :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
        );
END AxisPacketGenerator_src_Packet_Inspector_Real;


ARCHITECTURE rtl OF AxisPacketGenerator_src_Packet_Inspector_Real IS

  -- Component Declarations
  COMPONENT AxisPacketGenerator_src_Falling_Edge_Detector
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_rsvd                     :   IN    std_logic;  -- ufix1
          Fall                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT AxisPacketGenerator_src_SR_Latch
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          S                               :   IN    std_logic;
          R                               :   IN    std_logic;
          Q                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT AxisPacketGenerator_src_Rising_Edge_Detector
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_rsvd                     :   IN    std_logic;
          Rise                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT AxisPacketGenerator_src_Rising_Edge_Detector_Last
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_rsvd                     :   IN    std_logic;
          Rise                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT AxisPacketGenerator_src_SR_Latch1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          S                               :   IN    std_logic;
          R                               :   IN    std_logic;
          Q                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : AxisPacketGenerator_src_Falling_Edge_Detector
    USE ENTITY work.AxisPacketGenerator_src_Falling_Edge_Detector(rtl);

  FOR ALL : AxisPacketGenerator_src_SR_Latch
    USE ENTITY work.AxisPacketGenerator_src_SR_Latch(rtl);

  FOR ALL : AxisPacketGenerator_src_Rising_Edge_Detector
    USE ENTITY work.AxisPacketGenerator_src_Rising_Edge_Detector(rtl);

  FOR ALL : AxisPacketGenerator_src_Rising_Edge_Detector_Last
    USE ENTITY work.AxisPacketGenerator_src_Rising_Edge_Detector_Last(rtl);

  FOR ALL : AxisPacketGenerator_src_SR_Latch1
    USE ENTITY work.AxisPacketGenerator_src_SR_Latch1(rtl);

  -- Signals
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Falling_Edge_Detector_out1       : std_logic;
  SIGNAL SR_Latch_out1                    : std_logic;
  SIGNAL Rising_Edge_Detector_out1        : std_logic;
  SIGNAL Rising_Edge_Detector_Last_out1   : std_logic;
  SIGNAL SR_Latch1_out1                   : std_logic;
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL Constant_out1                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL Data_In_unsigned                 : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL Multiport_Switch_out1            : unsigned(127 DOWNTO 0);  -- ufix128

BEGIN
  u_Falling_Edge_Detector : AxisPacketGenerator_src_Falling_Edge_Detector
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Signal_rsvd => transfer,  -- ufix1
              Fall => Falling_Edge_Detector_out1
              );

  u_SR_Latch : AxisPacketGenerator_src_SR_Latch
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              S => AND_out1,
              R => Falling_Edge_Detector_out1,
              Q => SR_Latch_out1
              );

  u_Rising_Edge_Detector : AxisPacketGenerator_src_Rising_Edge_Detector
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Signal_rsvd => SR_Latch_out1,
              Rise => Rising_Edge_Detector_out1
              );

  u_Rising_Edge_Detector_Last : AxisPacketGenerator_src_Rising_Edge_Detector_Last
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Signal_rsvd => End_In,
              Rise => Rising_Edge_Detector_Last_out1
              );

  u_SR_Latch1 : AxisPacketGenerator_src_SR_Latch1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              S => Rising_Edge_Detector_out1,
              R => Rising_Edge_Detector_Last_out1,
              Q => SR_Latch1_out1
              );

  AND_out1 <= transfer AND Start_In;

  AND2_out1 <= SR_Latch1_out1 AND End_In;

  AND1_out1 <= SR_Latch1_out1 AND Valid_In;

  Constant_out1 <= to_unsigned(0, 128);

  Data_In_unsigned <= unsigned(Data_In);

  
  Multiport_Switch_out1 <= Constant_out1 WHEN SR_Latch1_out1 = '0' ELSE
      Data_In_unsigned;

  Data_Out <= std_logic_vector(Multiport_Switch_out1);

  End_Out <= AND2_out1;

  Valid_Out <= AND1_out1;

END rtl;

